Imports: {
import static gate.Utils.*;
}
Phase:firstphase
Input: Lookup
Options: control = appelt

Rule: label_mapping
(
{Lookup.minorType!="STOP_WORD"}
)
:lookup
-->
{
	gate.AnnotationSet lookup = (gate.AnnotationSet) bindings.get("lookup");
 	gate.Annotation ann = (gate.Annotation) lookup.iterator().next();
 	FeatureMap lookupFeatures = ann.getFeatures();
 	String label = lookupFeatures.get("LABEL").toString();
 	String source = lookupFeatures.get("minorType").toString();
 	
 	String content = stringFor(doc, ann);
 	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("text",content);
	features.put("SOURCE",source);
	features.putAll(lookupFeatures);
	features.remove("majorType");
 	features.remove("minorType");
	gate.AnnotationSet  tokens = outputAS.get("Token", ann.getStartNode().getOffset(), ann.getEndNode().getOffset());
 	List<Annotation> tokensList = new ArrayList<Annotation>(tokens);
	Collections.sort(tokensList, new gate.util.OffsetComparator());
	String lemma = "";
	String original_lemma = "";
	for (Annotation token : tokensList) {
 	    lemma = lemma + " " + token.getFeatures().get("root").toString();
	    original_lemma = original_lemma + " " + token.getFeatures().get("original_root").toString();
 	}
 	features.put("original_lemma",original_lemma.trim());
        features.put("lemma",lemma.trim().toLowerCase());
 	if(features.get("PrefSynonym")==null){
 		features.put("PrefSynonym",lemma.trim().toLowerCase());
 	}else{
	        features.put("PrefSynonym",features.get("PrefSynonym").toString().trim().toLowerCase());
	}
 	try{
		outputAS.add(lookup.firstNode().getOffset(),lookup.lastNode().getOffset(), label, features);
	}catch(InvalidOffsetException e){
		throw new LuckyException(e);
	}
	//remove old lookup
	inputAS.remove(ann);
	 
}
